h1. Current Coding Roadmap
----------------------------------------------------------------------------------------------------

* Short-term roadmap
** Mouse interactivity (camera control, physics manipulation)
** FSM-based control logic and sensor fusion prototyping
** GUI prototype (multi-window experiments using @ocornut's ImGui)
** StateDb: Add support for default values (memcpy from template instead of memset)
** Proper instanced rendering for meshes
*** Decide per-instance attribute approach
**** Approach 1: Attribute divisor
**** Approach 2: Uniform buffer object (UBO)
**** Approach 3: Buffer texture
**** Approach 4: nD-texture
*** Simply make all public mesh data available as per-instance data?

* Long-term roadmap
** Support for simple texturing of models (experiment with using baked-AO for rendering)
** Improve bloom effect
*** Gaussian/triangle/multipass (FBO ping-pong) blur
*** Try separating horizontal and vertical blur steps
*** State-based generalization of rendering passes/techniques
** Improve sphere-based smoke effect
*** Smoothed particle speed/creation rate according to velocity

----------------------------------------------------------------------------------------------------

* Star field rendering prototype using data from EAS Gaia project

* Change docking mechanism to be more like International Docking System Standard (IDSS)
** No distinction between male/female adapters (androgynous)

* Make custom 3D model format's data representation binary and memory-mappable
** Watch Per Vognsen's related YouTube live coding session
*** "A memory mappable, zero-copy asset format for real-time graphics"
*** https://www.youtube.com/watch?v=qZM2B4D7hZs

* Notes on multiple windows with OpenGL output
** Sharing context data most likely means implicit synchronization of API calls...
** We need one render thread/context per window (main thread triggers all renderer updates)

* Rocket drone ship landing
** Basic rocket control
*** Inner controller for maintaining target yaw/pitch
*** Outer controller for changing position by adjusting target yaw/pitch
*** Consider rotational velocity for dampening controller
** Mouse-based interaction with rocket (e.g. pick and attach string)
** Land rocket on drone ship
** Explore comic visual style incl. sphere/geometry-based smoke
** Buoyancy implementation touch-up
*** Change number of affectors depending on mesh (e.g. eight for cube)
*** Only affectors penetrating the surface contribute to friction approximation

* Flip maneuver controlled by top/bottom nose thruster
** Wing-tip-thruster-based control of roll for aiming nose thrusters
** Implement generalized thruster approach (incl. design in OBJ-files)

* Rocket payload launch abort landing
** Launch from drone ship
** Quadcopter-style control of payload (e.g. 2x4 thrusters like Dragon V2)

* Sky-crane style payload delivery on body with gravity?

* Compare assembly generated for call through function pointer vs. call through interface
** Interface pointer is pointer to abstract/pure virtual base class


h1. Guidelines
----------------------------------------------------------------------------------------------------

* Runtime is design time
* Write API usage code before (or at least pseudo-usage code while) designing API
* Never add functionality before it is needed
** Add-on instead of added in
** Modules, interfaces, sub-routines, ...
* IM vs. RM APIs (culling in/before logic or engine/renderer)
** Pre- or just in time loading of resources
* Make update and render data transformations mixable
** Mix where it makes sense/improves performance (e.g. particle system)
* Parallelize by data instance (A, B, C) not data transformation (X, Y, Z)
** Perform A:XYZ|B:XYZ|C:XYZ instead of ABC:X|ABC:Y|ABC:Z
* No premature parallelization
** Keep everything sequential and profile before introducing parallelism
** Kick off jobs in worker threads from one flow control thread
*** Flow control thread has to keep track of data dependencies as well
** Stay away from modules at arbitrarily offset refresh rates
* Order of operations
** Physics
** Application logic (incl. input processing)
** Video/audio output
* Application logic uses its state to drive renderer state from physics state

h2. Coding Guidelines

* Member-vars of structs/classes with non-static methods other than c'tor/d'tor have 'm_' prefix
* Make implicit callback-funciton invocations more explicit
** E.g. by passing potential CBs as parameters to invoking update function
** Passing CBs implicitly with context has a lot of pros too though...
* Avoid inheritance (try to use virtual, abstract interfaces only)
** Put base-class logic into logically enclosing scope
* Code complexity management
** We are not yet giving up on RAII
** Structure using modular classes
** Add-on modules instead of adding complexity to existing modules
*** Mid-size logical units (2 k - 5 k LOC)
** Hide implementation details from module header
*** Pimplistic design principles
*** E.g. hide OpenGL details in renderer and Bullet details in physics module
* Assert often (all implicit assumptions, pre- and post conditions)
* No virtual methods that are called n-times per frame
** Always use direct function/method calls for such transformations
* Use pointers only when pointer arithemtic is expected to be performed
** Except for when null references need to be represented
** Or when pointer usage feels more elegant (exception to the rule...)
* Always use struct instead of class
** That's a nice hint towards intended DoD-ness too...
* Consider custom code generation instead of using templates
** Take a look at Don Williamson's "pycgen"


h1. Module Details
----------------------------------------------------------------------------------------------------

h2. State Machine Logic Module

* Save (and load?) C code for defining state machines in a graphical way (use LLVM to parse?)
** The purpose of an instrumentable representation is improving on correctness
** First thing we need is a definition of correctness or (at least) improving it
*** Could be data read in a state that is not properly initialized in prev state/before
*** May also be fixable by an approach similar to FutureTalk/ExtSwarmCtrl SMs
**** Explicitly handle entering a new state (e.g. when state time is zero)...
** This approach should work for both C and C++ (thus depend on C language features only)

h2. State Database Module (StateDb, State DB)

* Performance regression testing
** Create random types with random fields similar to expected use case scenarios
*** E.g. create 50-100 types with randomized list of 2-20 fields (int, float, float4, ...)
** Create 1000-100000 instances for each type
** Count how many operations can be performed within a certain time frame
*** E.g. pseudo-random sequence of handle dereferentiations with and w/o field access
* Think about making individual state fields introspectible by registering them
** Could also be used to implement a field-based automatic interpolation mechanism
* Do we need to support stateful events in addition to states in recordings?
* Callback-based observer (w/o using inheritance!)
* Support for hierarchical state queries/reorganisation
** Most of the time there is more than one interesting tree representation for a set of states
** It would be nice to have a general mechanism to easily generate any tree representation
** Would probably have to be based on state field introspection feature...
* Out-of-elements case should be handled gracefully in release
** Return pointer to 0-element (not used ATM anyway...)
* Write state changes to state back-buffer?
** Copy to front-buffer before next frame
** All logic of a frame uses same base state for calculations
** Double/multi-buffered state storage for interpolation?
* Scrub and replay state
** Like GC recordings
** Secondary/internal state needs to get reset on rewind (not recorded!?)
** Think about what happens to lifecycle counters on reset
** Recordings have to track creation/deletion of elements
** Keyframes have to contain lifeycle counters and oid <=> pidx tables
* Scrub and continue from state
** Like Casey's looped game logic live programming
** Might need to restore full Bullet/physics state before continue
* Object/instance handles
** Indirection on deletion (last element swapped in on deletion)
** Detect deleted objects by storing object version in handle
* Classify all state as input, primary and secondary/internal
** Input: All user input state (keyboard, ...)
** Primary: Generated by application logic (mark with flag?)
** Secondary: Generated by domain-specific modules (e.g. physics, renderer) from primary state
** Internal: Like secondary but not even represented in the state DB
** No need to record secondary/internal states?
* Locking strategy
** Locking per type seems to be way to go
** We have to lock-protect object creation and destruction
** Maybe locking should be handled on a different level
*** E.g. copy input data for worker thread before spinning it up...
* Access control
** Allow limiting write access to some states? (e.g. internal states)
** More complicated schemes seem to induce a lot of friction
* Proper support for atomic operations
** If we stick to accessing the state DB from main thread only there is no need for them
* State database contains only primary state
** Secondary/internal state is defined through program logic
*** E.g. actual mesh data loaded from model file

h2. Platform Abstraction Module

* Hot re-loading of plugins on all platforms
** Engine core features could be hot-reloadable as well
** The only things that should be static are platform abstraction and plugin handling
** There might be data/temporal dependencies inbetween plugins
* Plugin system
** Always call plugin update function with fixed dt
** Must be easy to turn sub-module of plugin into plugin (common interface)
* DLL interface could be function returning pointer to interface class

h2. Renderer Module

* Implement special effects as plugins
** Renderer provides base infrastructure/graphics API abstraction only
** Allow low-level plugins with full OpenGL access?
*** Better to fully integrate into renderer?
* Frame buffer abstraction
** Render to texture
** Culling always depends on camera bound to frame buffer
** Output window is always special/first frame buffer
* Camera system
** Manual vs. automatic modes
*** Manual: Logic explicitly sets position and target
*** Automatic: Orbit mesh, relative to mesh
* Driving renderer by primary state allows for easy renderer unit tests
** Simply restore state, render frame and diff pixel output with ground truth
* Prevent OpenGL driver serialization/pipeline stall
** Do not use any 'glGet*'-functions (incl. 'glGetError')
** Use "ARB_debug_output" extension (should tell us when we are making a mistake)
* Do not use Vertex Array Object
** "Slower than glVertexAttribPointer on all implementations" according to Valve
** Has to be used starting from certain OpenGL version though...
* Vertex specification best practices
** Interleaving vertex attributes in vertex buffer objects not necessarily a good idea

h2. Assets Module

* Static versus dynamic (aka streaming) assets
* Allow for plugin-specific assets (simple copy full plugin directory)
* Static assets all in memory - renderer reload triggers redefinition for GL only
* Allow direct access to mesh data using asset ID (which is a hash on the name)

h2. Profiler Module

* Overwrite "operator new" to collect allocation stats
* "m"-key prints state DB memory stats (e.g. per object mem. usage)
* Display measured times as fraction of available frame time (e.g. 16 ms)
* Scope-based contextualization could be used to detect race conditions

h2. Physics Module

* Hot-reload of mesh triggers collision shape update (version field in mesh)


h1. Design
----------------------------------------------------------------------------------------------------

h2. Abstraction Layers

* Platform abstraction (static code)
** High resolution timers
** User input
** Graphics API
** Memory management
** Profiling
** Logging
** Plugin handling
** Filesystem (incl. queued/overlapped/memory mapped IO)
** Networking

* Engine abstraction (dynamic code?)
** Assets (textures/videos, models, shaders, audio, ...)
*** Runtime reloadable
*** File IO hidden behind abstraction (may not be loaded from files...)
*** Assets should be referred to using hash values
** Video output/rendering (meshes, materials, cameras, buffers, effects?, culling?)
** Physics
** Sound output
** Networking
** Engine level profiling
** State database

* Application logic (dynamic code)
** Runtime hot reloadable
** Uses engine abstraction to define application
** State machine mechanisms


h1. Research Backlog
----------------------------------------------------------------------------------------------------

* Chandler Carruth "Efficiency with Algorithms, Performance with Data Structures" 
** https://www.youtube.com/watch?v=fHNmRkzxHWs
* Glenn Fiedler's networked physics article series for networking/state-distribution
* BitSquid engine articles for general engine design
** http://bitsquid.blogspot.se/2014/09/building-data-oriented-entity-system.html
